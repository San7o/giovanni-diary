<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel>
<title>Giovanni's Diary Programming</title>
<link>giovanni-diary.netlify.com/programming/programming.html</link>
<description><![CDATA[Giovanni's programmer diary.]]></description>
<item>
<title>The Linux From Scratch Experience</title>
<link>https://giovanni-diary.netlify.app/programming/linux/linux-from-scratch.html</link>
<author>Giovanni Santini</author>
<pubDate>23 Apr 2025 00:00:00 GMT</pubDate>
<description><![CDATA[<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org544e5f5">1. Index</a></li>
<li><a href="#org708be89">2. What is LFS</a></li>
<li><a href="#orgaa8825c">3. Motivation</a></li>
<li><a href="#orgec042e0">4. Humble beginnings</a></li>
<li><a href="#org830520e">5. Level up</a></li>
<li><a href="#org7f5c33e">6. Maintaining the build</a></li>
</ul>
</div>
</div>
<p>
In this article I want to talk about one of the best educational
projects I have ever done: Linux From Scratch.
</p>

<p>
The Linux From Scratch experience is a hell of a long and boring
ride into manual dependency management, patching build scripts,
kernel panics, and a lot of time spent compiling. But as
hard times develop one's character, running LFS daily will strengthen
your patience and make you a competent power user.
</p>

<p>
Jokes aside, this project made me appreciate more the work of package
management and understand all the different parts of Linux's
userspace. I learned how to fearlessly own the kernel or get owned
and totally humiliated by the same technology you utter human being
wrote. It gave me experience in working directly with the core
userspace technologies, cutting down on high abstractions and
pre-configured linux distributions by making my own "distribution".
</p>


<div id="outline-container-org544e5f5" class="outline-2">
<h2 id="org544e5f5"><span class="section-number-2">1.</span> Index</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>What is LFS</li>
<li>Motivation</li>
<li>Humble beginnings</li>
<li>Level up</li>
<li>Maintaining the build</li>
</ul>
</div>
</div>

<div id="outline-container-org708be89" class="outline-2">
<h2 id="org708be89"><span class="section-number-2">2.</span> What is LFS</h2>
<div class="outline-text-2" id="text-2">
<p>
The idea is that you compile all your system from scratch by yourself,
without a packet manager. This is what distinguishes LFS from a
project like Gentoo, where it is true that you compile everything from
scratch but all the steps were already prepared and you just execute
them.
</p>

<p>
Practically, LFS is a manual with instructions to compile a bootable
system. This is expanded in Beyond Linux From Scratch (BLFS) which
adds additional programs like a graphics session or a browser.
</p>
</div>
</div>

<div id="outline-container-orgaa8825c" class="outline-2">
<h2 id="orgaa8825c"><span class="section-number-2">3.</span> Motivation</h2>
<div class="outline-text-2" id="text-3">
<p>
It all started at the end of October 2024. I was really frustrated
with NixOS because of how you need to do everything "then NixOS
way". I could not play and mess with the system as if I were in a
cage, I needed a change of mindset. With this push for freedom and
independence, I wanted to get to the extreme and try Linux From
Scratch which I have had in the back of my mind for a while.
</p>

<p>
Furthermore, I believed in the educational value of this project.
I already felt comfortable installing Archlinux or Gentoo and I
wanted something more challenging.
</p>
</div>
</div>

<div id="outline-container-orgec042e0" class="outline-2">
<h2 id="orgec042e0"><span class="section-number-2">4.</span> Humble beginnings</h2>
<div class="outline-text-2" id="text-4">
<p>
You start off as with any distribution by setting up the partitions
from a live environment. Then, you start compiling your compiler, gcc,
which is done in three steps. This is because to compile the compiler
you need a compiler&#x2026; duh. So you use an external one to compile a very
tiny gcc, which is used to compile a very tiny glibc, which is needed
for a better gcc, and again another time. Once you have gcc and glibc
you can really get started.
</p>

<p>
You proceed to install all the useful programs that you always find
like gnutils, dhcp, the boot manager (I did grub with UEFI) and of
course the Linux kernel. It takes special care for the kernel because
if you start with a minimal kernel, you need to manually enable all
the features you need to interface with the various devices, and It is
not always obvious which option you need to enable.
</p>

<p>
After all of this, you have a bootable kernel, congratulations.  You
just spent a week of your life to have a minimal system barely usable.
</p>

<p>
Now the real experience begins.
</p>
</div>
</div>

<div id="outline-container-org830520e" class="outline-2">
<h2 id="org830520e"><span class="section-number-2">5.</span> Level up</h2>
<div class="outline-text-2" id="text-5">
<p>
One big thing you probably need is a graphical session, and this is no
joke. Compiling all the dependencies for i3 took a while, but
eventually I had it. The next thing is what transitioned my system to
the next level.. a web browser (DUN DUN DUUUN).
</p>

<p>
Compiling firefox has so many dependencies, especially if you
want all the optional ones, just to make sure it works. In my
list of installed programs, firefox is at the 300th line. This
means that I compiled a total of 299 libraries / programs before
I could use firefox. All of this manually.
</p>

<p>
Once you have a browser you are good to go on your own. The book
does not help you much anymore and you developed the skills to
build everything without a guide. Only after all those weeks of
hard work you can start using your system "normally".
</p>

<p>
Obviously every time you need to install something, you think
twice if you really really need It of if It is just a short term
desire that will not greatly improve your life.
</p>
</div>
</div>

<div id="outline-container-org7f5c33e" class="outline-2">
<h2 id="org7f5c33e"><span class="section-number-2">6.</span> Maintaining the build</h2>
<div class="outline-text-2" id="text-6">
<p>
You can now focus on maintaining your system. You should subscribe to
some security updates mailing lists and update programs when some
critical vulnerability is found or a new version of some important
software comes out. I was following compilers like llvm, gcc, core
libraries like SDL, programs I use everyday like firefox and emacs,
and some more.
</p>

<p>
To make my life easier, I maintained a list of all the installed
programs with their version. I wrote a little package manager
called <a href="https://github.com/San7o/mapkg">mapkg</a> but I never fully committed to It. I kept a backup
of all the configuration files in a github <a href="https://github.com/San7o/lfs">repo</a>.
</p>

<p>
I kept this build for about 3-4 months, the I got bored and
installed Fedora because It was too much to make everything work.
Still, I will probably get back into it, It will surely be easier
with all the experience I gained.
</p>

<hr />

<p>
Travel: <a href="./linux.html">Linux</a>, <a href="../../theindex.html">Index</a>
</p>
</div>
</div>
]]></description>
</item>
<item>
<title>Monitor your Linux system with Prometheus and Grafana</title>
<link>https://giovanni-diary.netlify.app/programming/linux/linux-monitoring-with-prometheus-and-grafana.html</link>
<author>Giovanni Santini</author>
<pubDate>24 May 2025 00:00:00 GMT</pubDate>
<description><![CDATA[<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org187c338">1. Setting up node exporter</a></li>
<li><a href="#orgdd65f19">2. Setting up Prometheus</a></li>
<li><a href="#orgbdb05e8">3. Setting up Grafana</a></li>
</ul>
</div>
</div>
<p>
If you are managing any system, you need to have an effective way to
monitor, log and receive notifications about the state of the system.
A classic solution for Linux based servers is the Prometheus +
Grafana stack. In this document I will explain you how to setup this.
</p>

<p>
We will see how to setup both Prometheus and Grafana to monitor
various system statistics which are fetched by node exporter. I will
be using Fedora 42 as a base.
</p>

<div id="outline-container-org187c338" class="outline-2">
<h2 id="org187c338"><span class="section-number-2">1.</span> Setting up node exporter</h2>
<div class="outline-text-2" id="text-1">
<p>
Node exporter is a service that collects various system information
such as CPU load, ram usage and much more. Fedora already provides
the package "node-exporter" and service "node exporter":
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo dnf install node-exporter
sudo systemctl start node_exporter
</pre>
</div>

<p>
The service will listen on port 9100.
</p>
</div>
</div>

<div id="outline-container-orgdd65f19" class="outline-2">
<h2 id="orgdd65f19"><span class="section-number-2">2.</span> Setting up Prometheus</h2>
<div class="outline-text-2" id="text-2">
<p>
You can download the latest version of Prometheus from GitHub:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #eedd82;">LATEST</span>=$(curl -s https://api.github.com/repos/prometheus/prometheus/releases/latest | jq -cr .tag_name)
wget https://github.com/prometheus/prometheus/releases/download/$<span style="color: #eedd82;">LATEST</span>/prometheus-<span style="color: #ffa07a;">"${LATEST:1}"</span>.linux-amd64.tar.gz
tar -xf prometheus-*
<span style="color: #b0c4de;">cd</span> prometheus-<span style="color: #ffa07a;">"${LATEST:1}"</span>.linux-amd64
sudo cp prometheus /usr/local/bin/
</pre>
</div>

<p>
You need to add node exporter to the list of services to scrape, you
should edit the "/etc/prometheus/prometheus.yml" file and add the
following Item in the "scrape configs" section:
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #eedd82;">scrape_configs</span>:
  - <span style="color: #eedd82;">job_name</span>: <span style="color: #ffa07a;">'linux-server'</span>
    <span style="color: #eedd82;">scrape_interval</span>: 5s
    <span style="color: #eedd82;">static_configs</span>:
      - <span style="color: #eedd82;">targets</span>: [<span style="color: #ffa07a;">'localhost:9100'</span>]
</pre>
</div>

<p>
You can start the server by running the command "prometheus". It will
listen in port 9090 where you can access the html page. If you are not
lazy you can add a systemd service for prometheus (or whatever daemon
management you are using). To create a systemd service, add the
following content to the file
"/etc/systemd/system/prometheus.service":
</p>

<div class="org-src-container">
<pre class="src src-toml">[<span style="color: #98fb98;">Unit</span>]
<span style="color: #eedd82;">Description</span>=Prometheus
<span style="color: #eedd82;">Documentation</span>=https://github.com/prometheus/prometheus
<span style="color: #eedd82;">Wants</span>=network-online.target
<span style="color: #eedd82;">After</span>=network-online.target

[<span style="color: #98fb98;">Install</span>]
<span style="color: #eedd82;">WantedBy</span>=multi-user.target

[<span style="color: #98fb98;">Service</span>]
<span style="color: #eedd82;">Type</span>=simple
<span style="color: #eedd82;">User</span>=prometheus
<span style="color: #eedd82;">Group</span>=prometheus
<span style="color: #eedd82;">ExecReload</span>=/bin/kill -HUP $MAINPID
<span style="color: #eedd82;">ExecStart</span>=/usr/local/bin/prometheus
</pre>
</div>
</div>
</div>

<div id="outline-container-orgbdb05e8" class="outline-2">
<h2 id="orgbdb05e8"><span class="section-number-2">3.</span> Setting up Grafana</h2>
<div class="outline-text-2" id="text-3">
<p>
Install Grafana from your favorite package manager:
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo dnf install grafana
</pre>
</div>

<p>
Fedora already creates a systemd service so you can start it as usual,
otherwise you can create the service yourself like we did before.
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo systemctl start grafana-server
</pre>
</div>

<p>
If you are using the default Fedora's SELinux, in order to allow
grafana to use the prometheus tcp socket we need to write a custom
policy. Create the file "grafana<sub>websm.te</sub>" and add the following
content:
</p>

<pre class="example">
module grafana_websm 1.0;

require {
    type grafana_t;
    type websm_port_t;
    class tcp_socket name_connect;
}

# Allow Grafana to connect to ports labeled websm_port_t
allow grafana_t websm_port_t:tcp_socket name_connect;
</pre>

<p>
Then compile It and load It:
</p>

<div class="org-src-container">
<pre class="src src-bash">checkmodule -M -m -o grafana_websm.mod grafana_websm.te
semodule_package -o grafana_websm.pp -m grafana_websm.mod
sudo semodule -i grafana_websm.pp
</pre>
</div>

<p>
You can finally go to "<a href="http://localhost:3000">http://localhost:3000</a>" and login with "admin"
as the username and password and add prometheus as a source in Home &gt;
Connections &gt; Add a new connection and search for prometheus.
</p>

<p>
You can find already made dashboards for node exporter on the <a href="https://grafana.com/grafana/dashboards/?search=node+exporter">grafana
website</a>.
</p>



<div id="org5a65b81" class="figure">
<p><img src="../../ephemeris/images/grafana.png" alt="grafana.png" width="600px" align="center" />
</p>
<p><span class="figure-number">Figure 1: </span>Grafana dashboard I found online</p>
</div>


<hr />

<p>
Travel: <a href="./linux.html">Linux</a>, <a href="../../theindex.html">Index</a>
</p>
</div>
</div>
]]></description>
</item>
<item>
<title>Optimize power consumption on Linux</title>
<link>https://giovanni-diary.netlify.app/programming/linux/optimize-power-consumption-linux.html</link>
<author>Giovanni Santini</author>
<pubDate>15 Apr 2025 00:00:00 GMT</pubDate>
<description><![CDATA[<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgfa76ff2">1. Index</a></li>
<li><a href="#org0b9e2f0">2. ACPI Specification</a></li>
<li><a href="#orgbea12cd">3. Linux's ACPI</a></li>
<li><a href="#org9c8414c">4. Understand what consumes the most</a>
<ul>
<li><a href="#org7d38801">4.1. Powertop</a></li>
<li><a href="#org15453ac">4.2. Iotop</a></li>
<li><a href="#org8ebe459">4.3. Plot power usage</a></li>
</ul>
</li>
<li><a href="#orgf55f894">5. Save yourself time: TLP</a></li>
<li><a href="#org445f637">6. Kernel Settings</a>
<ul>
<li><a href="#org1b13359">6.1. Frequency Scaling</a></li>
<li><a href="#orga61ca83">6.2. Maximum charge level</a></li>
<li><a href="#orga49370a">6.3. Omit Scheduling-Clock ticks for idle CPUs</a></li>
<li><a href="#orgbf0d0a4">6.4. Disable Atime in BTRFS</a></li>
<li><a href="#org6301c48">6.5. Kernel Flags</a></li>
</ul>
</li>
<li><a href="#org01c593a">7. Helpful tips</a>
<ul>
<li><a href="#orgd46b92b">7.1. Light graphical session</a></li>
<li><a href="#org6ba9251">7.2. Have less background processes running</a></li>
<li><a href="#orgd5d6474">7.3. Lower the backlight</a></li>
</ul>
</li>
<li><a href="#org62a4963">8. Conclusions</a></li>
</ul>
</div>
</div>
<p>
This documents contains notes regarding my attempts to increase
battery life on my linux laptop[s]. I don't use my laptop for
computational-expensive tasks, I'd rather prefer the battery to last
longer. Here is a list of things I did to optimize for lower power
consumption.
</p>

<p>
This guide is focused on laptops but you can get value even for desktop
servers. If you have any comment / correction / suggestion please let
me know by sending me an email at <a href="mailto:giovanni.santini@proton.me">giovanni.santini@proton.me</a> or message
me on Mastodon <a href="https://mastodon.social/@santo7">@santo7@mastodon.social</a>.
</p>

<div id="outline-container-orgfa76ff2" class="outline-2">
<h2 id="orgfa76ff2"><span class="section-number-2">1.</span> Index</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>ACPI Specification</li>
<li>Linux's ACPI</li>
<li>Understand what consumes the most
<ul class="org-ul">
<li>Powertop</li>
<li>Iotop</li>
<li>Plot power usage</li>
</ul></li>
<li>Save yourself some time: TLP</li>
<li>Kernel Settings
<ul class="org-ul">
<li>Frequency scaling</li>
<li>Maximum charge level</li>
<li>Omit Scheduling-Clock ticks for idle CPUs</li>
<li>Disable Atime in BTRFS</li>
<li>Kernel flags</li>
</ul></li>
<li>Helpful tips
<ul class="org-ul">
<li>Light graphical sessions</li>
<li>Have less background processes running</li>
<li>Lower the backlight</li>
</ul></li>
<li>Conclusions</li>
</ul>
</div>
</div>

<div id="outline-container-org0b9e2f0" class="outline-2">
<h2 id="org0b9e2f0"><span class="section-number-2">2.</span> ACPI Specification</h2>
<div class="outline-text-2" id="text-2">
<p>
Before tinkering with your system, you should have a decent
understanding of how the operating system works in the context of
power management. I will now give you a quick overview of power
consumption on a linux system running on the x86 architecture.
</p>

<p>
Let's start with the hardware and how we can interact with It, more
specifically the CPU. Similarly to other hardware components, intel
CPUs implement the <a href="https://uefi.org/htmlspecs/ACPI_Spec_6_4_html/">ACPI</a> specification which enables an ACPI compatible
operating system to interface with hardware devices to fine tune
performance.
</p>

<p>
For processors, ACPI defines different power states within the global
working state G0, and they are called "Cx states": C0 means that the
processor is executing instructions, C1 to Cn are sleeping states
where the processor consumes less; C3 consumes less than C2 which
consumes less than C1 (but this is not specified from C4 to Cn).
</p>

<p>
Furthermore, ACPI defines "Px states" which are other states inside
C0, where P0 is maximum performance. Operating systems can change the
performance state of a core "on the fly" which is known as CPU
throttling, giving us more opportunity for optimizations.
</p>

<p>
Hardware may send interrupts that can wake up a processor from a
sleeping or low-power state, therefore you should try to minimize the
number of interrupts (by disabling devices) or balance them
efficiently across cores (using something like <a href="https://linux.die.net/man/1/irqbalance">irqbalance</a>, for
example).
</p>

<p>
Going back to ACPI, other devices are also a great source of power
consumption. Hardware other than processors have "device power states"
D0 to D3 where D0 means that the device is fully on, D3 that It is
off. ACPI further defines those states for many device types (network,
storage&#x2026;).
</p>
</div>
</div>

<div id="outline-container-orgbea12cd" class="outline-2">
<h2 id="orgbea12cd"><span class="section-number-2">3.</span> Linux's ACPI</h2>
<div class="outline-text-2" id="text-3">
<p>
An overview of the Linux's ACPI implementation can be found <a href="https://www.kernel.org/doc/ols/2005/ols2005v1-pages-59-76.pdf">here</a>.
Briefly, It is composed of an OS Service Layer which abstracts the
hardware, an user interface via sysfs and procfs, the core
implementation which includes an AML interpreter which is used as a
language between the firmware and the operating system, and other
components.
</p>

<p>
On Linux, userspace can interact with the ACPI subsystem via sysfs in
<code>/sys/devices/LNXSYSTM:00</code> or <code>/sys/bus/acpi/devices</code> (if ACPI support
is enabled). Inside, you will find directories that represent ACPI
devices, for each device the directory contains information about
them such as the status or the voltage. You may want to use something
like <code>acpid</code> or <code>upower</code> to dump ACPI info, if you are using some
linux distribution you may have something similar already installed.
</p>

<p>
Obviously, the more stuff you are doing with your computer, the more
energy It will consume. You should prefer light software compiled to
machine code, with optimizations enabled and stripped debug
information. We will discuss more what other optimizations you can
implement.
</p>
</div>
</div>

<div id="outline-container-org9c8414c" class="outline-2">
<h2 id="org9c8414c"><span class="section-number-2">4.</span> Understand what consumes the most</h2>
<div class="outline-text-2" id="text-4">
<p>
While you may try to thinker with configuration files and settings
following common heuristics (such as "less processes = less power
consumption"), It is more productive to evaluate the power consumption
of your operating system and make changes to the most power-draining
sources in order to have a greater impact on the overall power
consumption.
</p>
</div>

<div id="outline-container-org7d38801" class="outline-3">
<h3 id="org7d38801"><span class="section-number-3">4.1.</span> Powertop</h3>
<div class="outline-text-3" id="text-4-1">
<p>
A general tool that works well is <a href="https://linux.die.net/man/8/powertop">powertop</a> which will give you
per-process power consumption and information about CPU states,
devices and tunable settings to decrease power consumption. It is good
practice to calibrate the tool with <code>powertop --calibrate</code> (only on
laptops) before collecting data, this will setup the tool to show
correct estimations about power consumption.
</p>

<p>
From the overview tab you can easily see which processes are consuming
more power so that you can look into them individually.  For example,
If you find that systemd is logging too much, try to increase the time
between logs, and so on.
</p>
</div>
</div>

<div id="outline-container-org15453ac" class="outline-3">
<h3 id="org15453ac"><span class="section-number-3">4.2.</span> Iotop</h3>
<div class="outline-text-3" id="text-4-2">
<p>
Another useful tool is <a href="https://www.man7.org/linux/man-pages/man8/iotop.8.html">iotop</a> which will give you information about
disk usage. Even though this does not directly list power
consumption, there is a correlation between disk usage and power
consumption so it is beneficial to look into this.
</p>

<p>
You may start playing around with filesystems and mount options,
later we'll see an option in BTRFS that improves performance.
</p>
</div>
</div>

<div id="outline-container-org8ebe459" class="outline-3">
<h3 id="org8ebe459"><span class="section-number-3">4.3.</span> Plot power usage</h3>
<div class="outline-text-3" id="text-4-3">
<p>
To evaluate a change in your system, you can log and graph different
statistics and compare changes. The following script records
Watts consumption each second:
</p>

<div class="org-src-container">
<pre class="src src-lua"><span style="color: #ff7f24;">#!/bin/bash</span>

OUTFILE=<span style="color: #ffa07a;">"power_log.csv"</span>
GNUPLOT_SCRIPT=<span style="color: #ffa07a;">"plot_power.gp"</span>
INTERVAL=1  # seconds

echo <span style="color: #ffa07a;">"timestamp,power_watts"</span> &gt; <span style="color: #ffa07a;">"$OUTFILE"</span>

prev_energy=$(&lt; /sys/class/powercap/intel-rapl:0/energy_uj)
prev_time=$(date +%s)

<span style="color: #00ffff;">while</span> <span style="color: #7fffd4;">true</span>; <span style="color: #00ffff;">do</span>
    sleep <span style="color: #ffa07a;">"$INTERVAL"</span>

    curr_energy=$(&lt; /sys/class/powercap/intel-rapl:0/energy_uj)
    curr_time=$(date +%s)

    delta_energy=$((curr_energy - prev_energy))
    delta_time=$((curr_time - prev_time))

    # Handle energy wraparound (32-bit counter)
    <span style="color: #00ffff;">if</span> <span style="color: #ffa07a;">[[ $delta_energy -lt 0 ]]</span>; <span style="color: #00ffff;">then</span>
        delta_energy=$(( (2**32 + delta_energy) ))
    fi

    # Convert to watts
    power=$(awk <span style="color: #ffa07a;">"BEGIN { printf \"%.2f\", ($delta_energy / 1000000) / $delta_time }"</span>)
    timestamp=$(date +<span style="color: #ffa07a;">"%H:%M:%S"</span>)
    echo <span style="color: #ffa07a;">"$timestamp,$power"</span> &gt;&gt; <span style="color: #ffa07a;">"$OUTFILE"</span>

    prev_energy=$curr_energy
    prev_time=$curr_time
done
</pre>
</div>

<p>
You can then graph it with gnuplot:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #b0c4de;">set</span> datafile separator <span style="color: #ffa07a;">","</span>
<span style="color: #b0c4de;">set</span> xdata time
<span style="color: #b0c4de;">set</span> timefmt <span style="color: #ffa07a;">"%H:%M:%S"</span>
<span style="color: #b0c4de;">set</span> format x <span style="color: #ffa07a;">"%H:%M:%S"</span>
<span style="color: #b0c4de;">set</span> xlabel <span style="color: #ffa07a;">"Time"</span>
<span style="color: #b0c4de;">set</span> ylabel <span style="color: #ffa07a;">"Power (Watts)"</span>
<span style="color: #b0c4de;">set</span> title <span style="color: #ffa07a;">"Power Consumption Over Time"</span>
<span style="color: #b0c4de;">set</span> grid
<span style="color: #b0c4de;">set</span> term pngcairo size 800,400
<span style="color: #b0c4de;">set</span> output <span style="color: #ffa07a;">"power_plot.png"</span>

plot <span style="color: #ffa07a;">"power_log.csv"</span> using 1:2 with lines title <span style="color: #ffa07a;">"Power (W)"</span>
</pre>
</div>



<div id="orgec6f4b0" class="figure">
<p><img src="../../ephemeris/images/gnuplot-power.jpeg" alt="gnuplot-power.jpeg" width="600px" align="center" />
</p>
<p><span class="figure-number">Figure 1: </span>Gnuplot output</p>
</div>
</div>
</div>
</div>


<div id="outline-container-orgf55f894" class="outline-2">
<h2 id="orgf55f894"><span class="section-number-2">5.</span> Save yourself time: TLP</h2>
<div class="outline-text-2" id="text-5">
<p>
To save yourself some time configuring your system, you can use <a href="https://linrunner.de/tlp/introduction.html">TLP</a>
(or any similar tool) which automatically configures the kernel with
power saving settings. It is supposed to work well out of the box but
you can manually configure the settings via a configuration file in
<code>/etc/tlp.conf</code>. Please refer to the <a href="https://linrunner.de/tlp/index.html">documentation</a> for further
details.
</p>

<p>
The installation is quite strait forward, check your package
manager. To apply a power profile, run the following
command (do this every time you change the configuration file):
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo tlp start
</pre>
</div>

<p>
To get system information and the status of the tool, run the
following:
</p>
<div class="org-src-container">
<pre class="src src-bash">tlp-stat -s
</pre>
</div>

<p>
There are plenty of utilities like this, use them at your own risk.
</p>
</div>
</div>

<div id="outline-container-org445f637" class="outline-2">
<h2 id="org445f637"><span class="section-number-2">6.</span> Kernel Settings</h2>
<div class="outline-text-2" id="text-6">
<p>
There are many settings you can tune on linux, which will mostly
depend on your hardware and drivers. A decent list can be found in the
Archlinux's <a href="https://wiki.archlinux.org/title/Power_management">Power Management</a> page.
</p>

<p>
To access the ACPI subsystem you need to have the following
enabled in your <a href="https://wiki.gentoo.org/wiki/Power_management/Guide">kernel</a>:
</p>

<pre class="example">
Power management and ACPI options ---&gt;
-*- Device power management core functionality
[*] ACPI (Advanced Configuration and Power Interface) Support ---&gt;
  &lt;*&gt; AC Adapter
  &lt;*&gt; Battery
  -*- Button
  -*- Video
  &lt;*&gt; Fan
  &lt;*&gt; Processor
  &lt;*&gt; Thermal Zone

[*] CPU Frequency scaling ---&gt;
      Default CPUFreq governor (ondemand)  ---&gt;
  -*- 'performance' governor
  &lt;*&gt; 'powersave' governor
  &lt;*&gt; 'userspace' governor for userspace frequency scaling
  -*- 'ondemand' cpufreq policy governor
  &lt;*&gt; 'conservative' cpufreq governor
  &lt;*&gt; ACPI Processor P-States driver
</pre>

<p>
Additionally, enable Thermal and Powercap sysfs for your CPU:
</p>

<pre class="example">
Device Drivers ---&gt;
-*- Thermal drivers ---&gt;
  (0)   Emergency poweroff delay in milli-seconds                                                                              
  [*]   Expose thermal sensors as hwmon device                                                                                
  -*-   Enable writable trip points                                                                                          
        Default Thermal governor (step_wise)  ---&gt;                                                                           
  [*]   Fair-share thermal governor                                                                                           
  -*-   Step_wise thermal governor                                                                                            
  -*-   Bang Bang thermal governor                                                                                            
  -*-   User_space thermal governor                                                                                           
  [ ]   Thermal emulation mode support
  [*]   Power allocator thermal governor   
  Intel Thermal drivers ---&gt;
      &lt;M&gt;   Intel PowerClamp idle injection driver
      &lt;M&gt;   X86 package temperature thermal driver
      &lt; &gt;   Intel SoCs DTS thermal driver
      &lt;M&gt;   Intel PCH Thermal Reporting Driver
      ACPI INT340X thermal drivers  ---&gt;                                                                                     
          &lt;M&gt; ACPI INT340X thermal drivers
</pre>

<p>
And RAPL, which gives additional information about the processor:
</p>

<pre class="example">
Device Drivers ---&gt;
[*] Generic powercap sysfs driver ---&gt;
  &lt;M&gt;   Intel RAPL Support
</pre>

<p>
Now you should have all the requirements to start playing with
the settings, <code>tlp.conf</code> is a good place to start.
</p>
</div>

<div id="outline-container-org1b13359" class="outline-3">
<h3 id="org1b13359"><span class="section-number-3">6.1.</span> Frequency Scaling</h3>
<div class="outline-text-3" id="text-6-1">
<p>
You can choose a frequency scaling governor to manage throttling.
This will dynamically change the clock's frequency and voltage
configuration via P-states. Assuming you are using TLP, to list the
available governors you can run:
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo tlp-stat -p | grep governor
</pre>
</div>

<p>
By default, Fedora 41 has "performance" and "powersave", so I choose
powersave in tlp's settings (which is the default setting).
</p>
</div>
</div>

<div id="outline-container-orga61ca83" class="outline-3">
<h3 id="orga61ca83"><span class="section-number-3">6.2.</span> Maximum charge level</h3>
<div class="outline-text-3" id="text-6-2">
<p>
To increase battery life, It is recommended to reduce the maximum
charge level below 100% and prevent the charging process to happen for
every short discharge from the maximum. By default, TLP does not set
this. To enable it, set the variables <code>START_CHARGE_THRESH_BATx</code> and
<code>START_CHARGE_THRESH_BATx</code> to something like <code>75</code> and <code>80</code>, where <code>x</code>
represent the number of the battery in your laptop.  Sadly, on some
laptops (like my HP one) this is not supported and the command
<code>tlp-stat -b</code> would output
<code>/sys/class/power_supply/BAT1/charge_control_start_threshold (not available)</code>.
</p>
</div>
</div>

<div id="outline-container-orga49370a" class="outline-3">
<h3 id="orga49370a"><span class="section-number-3">6.3.</span> Omit Scheduling-Clock ticks for idle CPUs</h3>
<div class="outline-text-3" id="text-6-3">
<p>
If you are doing mostly lightweight work with long idle periods, you
can limit the scheduling-clock interrupt to prevent waking up some
cores when It is not needed. The linux kernel <a href="https://www.kernel.org/doc/html/latest/timers/no_hz.html#omit-scheduling-clock-ticks-for-cpus-with-only-one-runnable-task">documentation</a> says that
if scheduling is set to periodic, the system would drain 2-3 times
faster compared to a kernel with this disabled, so It is quite a big
deal. You may need it if you are running aggressive real-time
response constraints, but this is not our case.
</p>

<p>
Enable the following in your kernel configuration:
</p>

<pre class="example">
CONFIG_NO_HZ_IDLE=y
CONFIG_HZ_100=y 
</pre>
</div>
</div>

<div id="outline-container-orgbf0d0a4" class="outline-3">
<h3 id="orgbf0d0a4"><span class="section-number-3">6.4.</span> Disable Atime in BTRFS</h3>
<div class="outline-text-3" id="text-6-4">
<p>
BTRFS is a popular filesystem. A part of Its design is the CoW
(Copy on Write) where a certain file would get copied in another
location when a modification is made, this is necessary for
the snapshotting functionality of the filesystem. However, this
causes the problem where a file would get copied even if you
just read it, just by updating the last access timestamp. <a href="https://lwn.net/Articles/499293/">This</a>
LWN article from Jonathan Corbet explains this well:
</p>

<blockquote>
<p>
If somebody takes a snapshot of a filesystem, then performs a
recursive grep on that filesystem, the last-access time of every
file touched may be updated. That, in turn, can cause copy-on-write
operations on each file's inode structure, with the result that many
or all of the inodes in the filesystem may be duplicated. That can
increase the space consumption of the filesystem considerably;
Alexander posted an example where a recursive grep caused 2.2GB of
free space to disappear. That is a surprising result for what is
meant to be a read-only operation.
</p>
</blockquote>

<p>
To disable the Atime feature, you need to put the <code>noatime</code> option
on the BTRFS entries in <code>/etc/fstab</code>.
</p>
</div>
</div>

<div id="outline-container-org6301c48" class="outline-3">
<h3 id="org6301c48"><span class="section-number-3">6.5.</span> Kernel Flags</h3>
<div class="outline-text-3" id="text-6-5">
<p>
You can add the following kernel flags when booting your system:
</p>
<ul class="org-ul">
<li><code>pcie_aspm=force</code>: force PCIe Active State Power Management
to put PCIe devices into low-power states. Some devices may
stop working if they are not implemented correctly, so do your
own tests.</li>
<li>For intel GPUs:
<ul class="org-ul">
<li><code>i915.enable_dc=2</code>: enable the display engine to enter
low-power states.</li>
<li><code>i915.enable_fbc=1</code>: enables Frame Buffer Compression (FBC),
reducing memory bandwidth when the screen content is static</li>
<li><code>i915.enable_psr=1</code>: enables Panel Self Refresh (PSR) — lets the
display refresh from its own memory instead of continuously
redrawing.</li>
</ul></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org01c593a" class="outline-2">
<h2 id="org01c593a"><span class="section-number-2">7.</span> Helpful tips</h2>
<div class="outline-text-2" id="text-7">
<p>
Here is a list of other helpful things that will make your operating
system lighter and more efficient.
</p>
</div>

<div id="outline-container-orgd46b92b" class="outline-3">
<h3 id="orgd46b92b"><span class="section-number-3">7.1.</span> Light graphical session</h3>
<div class="outline-text-3" id="text-7-1">
<p>
If you are using a graphical environment, chances are that you do not
need a full blown desktop environment to manage the position of your
windows. The lighter your window manager, the better. My argument is
that all you need is a program that can create windows and move them;
such program should be simple and small, understandable and hackable.
Everything else is bloated software, I would suggest something like
<a href="https://dwm.suckless.org/">dwm</a> or <a href="https://www.ctwm.org/index.html">ctwm</a>.
</p>

<p>
I did not compare Wayland-based window managers against X11, I found
some benchmarks <a href="https://www.phoronix.com/news/GNOME-Xorg-Wayland-AMD-Renoir">online</a> and they are similar in power consumption but
the benchmarks were made with Gnome. Unless you find a really minimal
window manager using wayland, the good old simple X11 window managers
are the best.
</p>
</div>
</div>

<div id="outline-container-org6ba9251" class="outline-3">
<h3 id="org6ba9251"><span class="section-number-3">7.2.</span> Have less background processes running</h3>
<div class="outline-text-3" id="text-7-2">
<p>
If you are using a linux distribution instead of compiling your system
on your own, chances are that the maintainers of said distribution
have enabled a bunch of stuff you don't really need. This goes from
kernel modules for various hardware, which you do not need, to
background daemons to do things like reporting crashes.
</p>

<p>
If your system uses systemd, you can check active services using the
<code>systemctl status</code> command. Even though many of them may be idle and
may not contribute much to the overall power consumption, they still
consume resources so It is helpful to have less things running in
your system.
</p>

<p>
Disable things like Bluetooth if you don't need it, crash reporting
daemons, etc&#x2026;
</p>
</div>
</div>

<div id="outline-container-orgd5d6474" class="outline-3">
<h3 id="orgd5d6474"><span class="section-number-3">7.3.</span> Lower the backlight</h3>
<div class="outline-text-3" id="text-7-3">
<p>
Lower the backlight of your laptop as much as you are comfortable
with.
</p>
</div>
</div>
</div>

<div id="outline-container-org62a4963" class="outline-2">
<h2 id="org62a4963"><span class="section-number-2">8.</span> Conclusions</h2>
<div class="outline-text-2" id="text-8">
<p>
I hope you learned something new from this article. I will keep this
updated with new information I gain overtime, if you have any
suggestion to improve the work I'd be happy to hear it.
</p>

<hr />

<p>
Travel: <a href="./linux.html">Linux</a>, <a href="../../theindex.html">Index</a>
</p>
</div>
</div>
]]></description>
</item>
<item>
<title>Contributing to Openstreetmap</title>
<link>https://giovanni-diary.netlify.app/programming/contributing-to-openstreetmap.html</link>
<author>Giovanni Santini</author>
<pubDate>01 May 2025 00:00:00 GMT</pubDate>
<description><![CDATA[<p>
Lately I have been contributing to <a href="https://www.openstreetmap.org">Openstreetmap</a> and I am really
enjoying it.
</p>

<p>
Openstreetmap is a shared effort to map the entire globe, leaded by
individual contributors worldwide, in a free and transparent way.  You
can browse the map on the openstreetmap website and edit it directly
via the web editor after making an account. What you notice after a
while is that each item, each area, each bench or tree was placed
there by someone, and one bench after the other people created a
complete map of the world.
</p>

<p>
I find this fascinating because when I am out contributing to the map
I feel like I am documenting a certain place in time, like taking a
snapshot of it. I know my contribution to the map is only temporary:
shops will close, streets get changed, benches are moved. Still, what
I care the most is how the place looks like now that I am in it, even
if It is not forever, and I want to keep a record of it. You could
compare the map now with the map in 50 years and see how much It
changed, little by little; people in the future will have a more
detailed picture of a place in the past.
</p>

<p>
Contributing to the map is really easy, the editor is intuitive and
there is a tutorial which I encourage you do to. Moreover, there are
many android apps like <a href="https://f-droid.org/en/packages/de.westnordost.streetcomplete/">StreetComplete</a> which gamify the process and
renders It more accessible even for casual users without much effort.
</p>

<p>
StreetComplete will show you missing data in the map near your
location, and you can contribute by answering simple questions like
"Is there a traffic island in this crosswalk?" or "Are there lights
in this street?". Most of the time you can answer yes or no, you
could also fill the opening hours of shops or double check that some
places still exists. Overall, this is a very easy app for casual
users who want to contribute to Openstreetmap.
</p>


<div id="orge1832a8" class="figure">
<p><img src="../ephemeris/images/streetcomplete-map.jpeg" alt="streetcomplete-map.jpeg" width="600px" align="center" />
</p>
<p><span class="figure-number">Figure 1: </span>Map view in StreetComplete</p>
</div>

<p>
Another big group that documents knowledge is Wikimedia, which manages
things like Wikipedia, you might have heard of this.  There is a big
community around It, with local communities on many countries and
regions to make information available to everyone freely. Similarly,
there are local communities for Openstreetmap.
</p>

<p>
I think the existence of those project is really important and I am
really grateful to all the people that have contributed to It. I
wish those project to strive and be present and relevant. I'll give
my part, even if in small amount, and maybe even inspire other
like-minded people to do the same.
</p>

<hr />

<p>
Travel: <a href="programming.html">Programming</a>, <a href="../theindex.html">Index</a>
</p>
]]></description>
</item>
<item>
<title>How to root a Samsung Galaxy J5 (2016)</title>
<link>https://giovanni-diary.netlify.app/programming/root-a-samsung-galaxy-j5.html</link>
<author>Giovanni Santini</author>
<pubDate>01 May 2025 00:00:00 GMT</pubDate>
<description><![CDATA[<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orge3f9fcd">1. Index</a></li>
<li><a href="#orge039897">2. The process</a></li>
<li><a href="#org1eae975">3. 1. Boot a custom recovery image</a></li>
<li><a href="#orgb353247">4. 2. Install a special application</a></li>
<li><a href="#org0f536fc">5. 3. Enjoy the power</a></li>
<li><a href="#orgfeba6b6">6. Installing an alternative OS</a></li>
</ul>
</div>
</div>
<div id="outline-container-orge3f9fcd" class="outline-2">
<h2 id="orge3f9fcd"><span class="section-number-2">1.</span> Index</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>The processes</li>
<li>1. Boot a custom recovery image</li>
<li>2. Install a special applications</li>
<li>3. Enjoy the power</li>
<li>Installing an alternative OS</li>
</ul>

<p>
Rooting android your first time is a frustrating experience at best.
It took me more than necessary to get root privileges on my phone,
therefore I am writing a quick guide for my future self when he will
need my assistance. This document explains the steps I took to
successfully root my android phone.
</p>

<p>
Note that the process may vary in several ways, mainly depending on
the model of the phone you are trying to root. This guide is written
specifically for the Samsung Galaxy J5 (2016), however most of the
steps should be similar hopefully. It is advised to read this article
first before attempting to root your phone.
</p>
</div>
</div>

<div id="outline-container-orge039897" class="outline-2">
<h2 id="orge039897"><span class="section-number-2">2.</span> The process</h2>
<div class="outline-text-2" id="text-2">
<p>
To root a phone we need something else with root privileges to grant
us the same status. Of course, stock Android will never let us get
even a glimpse of this power for security reasons so we need to find a
workaround.  The solution is to boot a custom recovery image, which has
high privileges, to install some applications with root status. We
can leverage this to install a special app that gives permissions to
other apps during normal system execution.
</p>

<p>
To recap, we need to do the following to achieve root:
</p>
<ol class="org-ol">
<li>Boot a custom recovery image</li>
<li>Install a special application</li>
<li>Enjoy the power</li>
</ol>

<p>
Note that you might mess things up and lose all your data, so be
prepared.  Probably you will also lose your device's warranty.
</p>

<p>
You have been warned :-)
</p>
</div>
</div>

<div id="outline-container-org1eae975" class="outline-2">
<h2 id="org1eae975"><span class="section-number-2">3.</span> 1. Boot a custom recovery image</h2>
<div class="outline-text-2" id="text-3">
<p>
We need to download a custom recovery image for your phone model.
There are many cool looking alternatives, I used TWRP and It can be
downloaded from the official website. Note that you need to choose the
right version based on your phone.  I downloaded the <code>.img</code> file,
compressed it in a tar archive and renamed it <code>recovery.tar</code>.
</p>

<div class="org-src-container">
<pre class="src src-bash">wget https://.../something.img
tar -cf something.tar something.img
mv something.img recovery.zip
</pre>
</div>

<p>
Now we need to put this into our device. We need to boot into download
mode which on my smartphone is <code>VOL_DOWN + HOME + POWER</code>. After this
we can interact with the device, I used <code>odin4</code> (linux version) for
this. To check that oding can talk to the device, run <code>odin4 -l</code> and
expect some output. If it does not show anything I cannot help you, It
is probably a driver problem, good luck, I believe in you, trust in
yourself, you are strong. If you get some permission error, you need
to set something on your udev, just follow closely the help output
and you should be good to go.
</p>

<p>
Then load the recovery mode with <code>odin4 -a recovery.zip</code> and,
IMMEDIATELY after it finishes, you need to boot in recovery mode,
which on my phone is done via <code>VOL_UP + HOME + POWER</code>. You need to be
QUICK, REALLY QUICK!!! Keep trying until you manage to do this. If
everything was successful, you are now greeted with a cool recovery
program.
</p>
</div>
</div>

<div id="outline-container-orgb353247" class="outline-2">
<h2 id="orgb353247"><span class="section-number-2">4.</span> 2. Install a special application</h2>
<div class="outline-text-2" id="text-4">
<p>
We now need to install something that will make other things root. We
can use Magisk, you can download the apk from the official github
releases and rename it to a <code>.zip</code> file. We need to send It to the
device and we will use <code>adb</code> from the official platform tools. Just
extract the archive.
</p>

<p>
On the device, select <code>advanced -&gt; sideload -&gt; swipe to start
sideload</code>.  On your pc, run <code>adb sideload app-release.zip</code>, this
should install magisk and it should show the installation on the
phone. After this finishes, reboot your phone, go to your apps and
open Magisk, It may ask to be installed again, just say yes, follow
the installation instructions (just tap two buttons), maybe close it
and reopen it, reboot and&#x2026;  we are root!
</p>

<p>
You can check this by installing RootChecker.
</p>
</div>
</div>

<div id="outline-container-org0f536fc" class="outline-2">
<h2 id="org0f536fc"><span class="section-number-2">5.</span> 3. Enjoy the power</h2>
<div class="outline-text-2" id="text-5">
<p>
Now that you are root you can do a bunch of cool things like wipe out
everything and install gentoo. A more useful thing would be to install
an adblocker (I'd suggest <code>adAway</code>) so that you can actually read blogs
and news in peace.
</p>
</div>
</div>

<div id="outline-container-orgfeba6b6" class="outline-2">
<h2 id="orgfeba6b6"><span class="section-number-2">6.</span> Installing an alternative OS</h2>
<div class="outline-text-2" id="text-6">
<p>
There are plenty of alternatives and variations of Android out there,
the only constraint is that they need to support your phone.  You
could theoretically make your own build but I have no idea how you
would resolve drivers. I aplogize for my ignorance, you'll have to
figure It out some day.  I found <a href="https://community.e.foundation/t/unofficial-builds-samsung-galaxy-j5-series-for-e-os-r/56461/3">this</a> unofficial build of /e/OS,
hopefully the link still works.
</p>

<p>
After you have installed the custom recovery media, you can start the
sideload just as you did for Makisk in the previous section, and load
the downloaded archive. That is really it, you should have a working
OS.  If the process fails and you cannot boot the OS correctly, you
should be able to access the recovery mode on startup assuming that
you can turn off your device. In my experience, when the boot broke, I
could not power It off so I just removed the battery and
rebooted. Unfortunately, you cannot do this in new phones (sight), so
you may try to make It discharge until ti powerd off, gook luck.
</p>

<hr />

<p>
Travel: <a href="programming.html">Programming</a>, <a href="../theindex.html">Index</a>
</p>
</div>
</div>
]]></description>
</item>
</channel></rss>